From 27424e5d0ee287e5ddb348b322d79c78b1b0ff24 Mon Sep 17 00:00:00 2001
From: Pavel Zakharov <pavel.zakharov@delphix.com>
Date: Tue, 19 Jun 2018 13:46:44 -0400
Subject: [PATCH] 
 0030-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch

---
 ssh-add.c    | 13 +++++++++++--
 ssh-keygen.c | 20 +++++++++++++++++---
 2 files changed, 28 insertions(+), 5 deletions(-)

diff --git a/ssh-add.c b/ssh-add.c
index adcc459..9bcd9f9 100644
--- a/ssh-add.c
+++ b/ssh-add.c
@@ -52,6 +52,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <limits.h>
+#include <assert.h>
 
 #include "xmalloc.h"
 #include "ssh.h"
@@ -82,7 +83,8 @@ static char *default_files[] = {
 	NULL
 };
 
-static int fingerprint_hash = SSH_FP_HASH_DEFAULT;
+static int fingerprint_hash = SSH_DIGEST_MD5;
+static int fingerprint_compat = 1;
 
 /* Default lifetime (0 == forever) */
 static int lifetime = 0;
@@ -406,6 +408,7 @@ static int
 list_identities(int agent_fd, int do_fp)
 {
 	char *fp;
+	char *fpp;
 	int r;
 	struct ssh_identitylist *idlist;
 	u_int32_t left;
@@ -423,8 +426,13 @@ list_identities(int agent_fd, int do_fp)
 		if (do_fp) {
 			fp = sshkey_fingerprint(idlist->keys[i],
 			    fingerprint_hash, SSH_FP_DEFAULT);
+			fpp = fp;
+			if (fingerprint_compat == 1) {
+				assert(strncmp(fp, "MD5:", 4) == 0);
+				fpp += 4;
+			}
 			printf("%u %s %s (%s)\n", sshkey_size(idlist->keys[i]),
-			    fp == NULL ? "(null)" : fp, idlist->comments[i],
+				    fp == NULL ? "(null)" : fpp,
 			    sshkey_type(idlist->keys[i]));
 			free(fp);
 		} else {
@@ -552,6 +560,7 @@ main(int argc, char **argv)
 		switch (ch) {
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
+			fingerprint_compat = 0;
 			if (fingerprint_hash == -1)
 				fatal("Invalid hash algorithm \"%s\"", optarg);
 			break;
diff --git a/ssh-keygen.c b/ssh-keygen.c
index 9aac64f..0356d94 100644
--- a/ssh-keygen.c
+++ b/ssh-keygen.c
@@ -38,6 +38,7 @@
 #include <unistd.h>
 #include <limits.h>
 #include <locale.h>
+#include <assert.h>
 
 #include "xmalloc.h"
 #include "sshkey.h"
@@ -103,7 +104,8 @@ int print_fingerprint = 0;
 int print_bubblebabble = 0;
 
 /* Hash algorithm to use for fingerprints. */
-int fingerprint_hash = SSH_FP_HASH_DEFAULT;
+int fingerprint_hash = SSH_DIGEST_MD5;
+int fingerprint_compat = 1;
 
 /* The identity file name, given on the command line or entered by the user. */
 char identity_file[1024];
@@ -770,6 +772,7 @@ do_download(struct passwd *pw)
 	enum sshkey_fp_rep rep;
 	int fptype;
 	char *fp, *ra;
+	char *fpp;
 
 	fptype = print_bubblebabble ? SSH_DIGEST_SHA1 : fingerprint_hash;
 	rep =    print_bubblebabble ? SSH_FP_BUBBLEBABBLE : SSH_FP_DEFAULT;
@@ -785,8 +788,13 @@ do_download(struct passwd *pw)
 			    SSH_FP_RANDOMART);
 			if (fp == NULL || ra == NULL)
 				fatal("%s: sshkey_fingerprint fail", __func__);
+			fpp = fp;
+			if (fingerprint_compat == 1) {
+				assert(strncmp(fp, "MD5:", 4) == 0);
+				fpp += 4;
+			}
 			printf("%u %s %s (PKCS11 key)\n", sshkey_size(keys[i]),
-			    fp, sshkey_type(keys[i]));
+			    fpp, sshkey_type(keys[i]));
 			if (log_level >= SYSLOG_LEVEL_VERBOSE)
 				printf("%s\n", ra);
 			free(ra);
@@ -823,7 +831,7 @@ try_read_key(char **cpp)
 static void
 fingerprint_one_key(const struct sshkey *public, const char *comment)
 {
-	char *fp = NULL, *ra = NULL;
+	char *fp = NULL, *ra = NULL, *fpp;
 	enum sshkey_fp_rep rep;
 	int fptype;
 
@@ -833,6 +841,11 @@ fingerprint_one_key(const struct sshkey *public, const char *comment)
 	ra = sshkey_fingerprint(public, fingerprint_hash, SSH_FP_RANDOMART);
 	if (fp == NULL || ra == NULL)
 		fatal("%s: sshkey_fingerprint failed", __func__);
+	fpp = fp;
+	if (!print_bubblebabble && fingerprint_compat == 1) {
+		assert(strncmp(fp, "MD5:", 4) == 0);
+		fpp += 4;
+	}
 	mprintf("%u %s %s (%s)\n", sshkey_size(public), fp,
 	    comment ? comment : "no comment", sshkey_type(public));
 	if (log_level >= SYSLOG_LEVEL_VERBOSE)
@@ -2387,6 +2400,7 @@ main(int argc, char **argv)
 			break;
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
+			fingerprint_compat = 0;
 			if (fingerprint_hash == -1)
 				fatal("Invalid hash algorithm \"%s\"", optarg);
 			break;
-- 
2.14.3 (Apple Git-98)

