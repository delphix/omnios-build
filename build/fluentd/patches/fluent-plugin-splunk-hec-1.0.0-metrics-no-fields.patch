diff --git a/lib/fluent/plugin/out_splunk_hec.rb b/lib/fluent/plugin/out_splunk_hec.rb
index 125f175..6752bb5 100644
--- a/lib/fluent/plugin/out_splunk_hec.rb
+++ b/lib/fluent/plugin/out_splunk_hec.rb
@@ -16,7 +16,7 @@ module Fluent::Plugin
     autoload :VERSION, "fluent/plugin/out_splunk_hec/version"
     autoload :MatchFormatter, "fluent/plugin/out_splunk_hec/match_formatter"
 
-    KEY_FIELDS = %w[index host source sourcetype metric_name metric_value].freeze
+    KEY_FIELDS = %w[index host source sourcetype metric_name metric_value metric_time].freeze
     TAG_PLACEHOLDER = '${tag}'.freeze
 
     MISSING_FIELD = Hash.new { |h, k|
@@ -90,6 +90,12 @@ module Fluent::Plugin
     desc "Field name to contain metric value, this is required when `metric_name_key` is set."
     config_param :metric_value_key, :string, default: nil
 
+    desc "Field name to contain metric timestamp, this is required when `metric_name_key` is set."
+    config_param :metric_time_key, :string, default: nil
+
+    desc 'When `data_type` is set to "metric", set this field to `true` to send metrics event data in top-level `fields` json property of the event, `false` otherwise.'
+    config_param :metrics_in_fields, :bool, default: false
+
     desc 'When set to true, all fields defined in `index_key`, `host_key`, `source_key`, `sourcetype_key`, `metric_name_key`, `metric_value_key` will not be removed from the original event.'
     config_param :keep_keys, :bool, default: false
 
@@ -184,6 +190,8 @@ module Fluent::Plugin
       raise Fluent::ConfigError, "`metric_name_key` is required when `metrics_from_event` is `false`." unless @metric_name_key
 
       raise Fluent::ConfigError, "`metric_value_key` is required when `metric_name_key` is set." unless @metric_value_key
+
+      raise Fluent::ConfigError, "`metric_time_key` is required when `metric_name_key` is set." unless @metric_value_key
     end
 
     def prepare_key_fields
@@ -233,6 +241,9 @@ module Fluent::Plugin
 	define_singleton_method :format, method(:format_event)
       else
 	define_singleton_method :format, method(:format_metric)
+	if @metrics_in_fields
+	  @hec_api = URI("#{@protocol}://#{@hec_host}:#{@hec_port}/services/collector/event")
+	end
       end
     end
 
@@ -265,16 +276,20 @@ module Fluent::Plugin
       payload = {
 	host: @host ? @host.(tag, record) : @default_host,
 	time: time.to_i,
-	event: 'metric'
       }
       payload[:index] = @index.(tag, record) if @index
       payload[:source] = @source.(tag, record) if @source
       payload[:sourcetype] = @sourcetype.(tag, record) if @sourcetype
 
+      if @metrics_in_fields
+	payload[:event] = 'metric'
+      end
+
       if not @metrics_from_event
 	fields = {
 	  metric_name: @metric_name.(tag, record),
-	  _value: @metric_value.(tag, record)
+	  _value: @metric_value.(tag, record),
+	  _time: @metric_time.(tag, record)
 	}
 
 	if @extra_fields
@@ -285,7 +300,11 @@ module Fluent::Plugin
 
 	fields.compact!
 
-	payload[:fields] = convert_to_utf8 fields
+        if @metrics_in_fields
+	  payload[:fields] = convert_to_utf8 fields
+        else
+	  payload[:event] = convert_to_utf8 fields
+        end
 
 	return MultiJson.dump(payload)
       end
diff --git a/test/fluent/plugin/out_splunk_hec_test.rb b/test/fluent/plugin/out_splunk_hec_test.rb
index 3edf7c4..3749d39 100644
--- a/test/fluent/plugin/out_splunk_hec_test.rb
+++ b/test/fluent/plugin/out_splunk_hec_test.rb
@@ -166,7 +166,7 @@ describe Fluent::Plugin::SplunkHecOutput do
       }.must_raise Fluent::ConfigError
 
       expect(
-	create_output_driver('hec_host somehost', 'data_type metric', 'metric_name_key x', 'metric_value_key y')
+	create_output_driver('hec_host somehost', 'data_type metric', 'metric_name_key x', 'metric_value_key y', 'metric_time_key z')
       ).wont_be_nil
     end
 
